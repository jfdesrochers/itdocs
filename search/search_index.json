{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to IT Docs by Jean-Francois Desrochers! You will find everything I've learned and documented over time down here. I hope you learn something!\n\n\nWindows Sys Admin\n\n\nHow to unlock an Active Directory object\n\n\nLinux Sys Admin\n\n\nCreating SSH keys and aliases\n\n\nInfrastructure\n\n\nHow to replace/upgrade a drive in a HP MSA P2000", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to IT Docs by Jean-Francois Desrochers! You will find everything I've learned and documented over time down here. I hope you learn something!", 
            "title": "Welcome"
        }, 
        {
            "location": "/#windows-sys-admin", 
            "text": "How to unlock an Active Directory object", 
            "title": "Windows Sys Admin"
        }, 
        {
            "location": "/#linux-sys-admin", 
            "text": "Creating SSH keys and aliases", 
            "title": "Linux Sys Admin"
        }, 
        {
            "location": "/#infrastructure", 
            "text": "How to replace/upgrade a drive in a HP MSA P2000", 
            "title": "Infrastructure"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/", 
            "text": "Creating SSH keys and aliases\n\n\n1 - Create a RSA key pair\n\n\nRun the following command to generate a key pair on your machine:\n\n\nssh-keygen\n\n\n\n\n\n\n\nNote\n\n\nYou can optionally use the command \nssh-keygen -b 4096\n to use a higher security key.\n\n\n\n\nYou will be prompted for a location. You can use the default location (just press \nenter\n) or specify your own.\n\n\n\n\nWarning\n\n\nMake sure you don't overwrite any existing file, because you may break an existing connection if you do.\n\n\n\n\nYou will then be prompted to enter a passphrase. This step is optional, but recommended, especially if you share your machine with other people. If you specify a passphrase, you will be prompted for it every time you use the key to login using SSH.\n\n\nYou should then have two files at your specified location: \nid_rsa\n, which is your \nprivate\n key (do NOT share with anyone) and \nid_rsa.pub\n, which is your \npublic\n key (that you will put on your server).\n\n\n2 - Copying your key to the server\n\n\nNow you need to copy your new key to your server. You will need either a password-based SSH account or physical access to the machine for this step. Here are two ways of doing this:\n\n\nUsing \nssh-copy-id\n\n\nIf you have \nssh-copy-id\n available on your system this step is easy, just run the following command:\n\n\nssh-copy-id yourusername@yourserver\n\n\n\n\n\nyourusername\n should be a password-based SSH account on your server.\n\n\nIf you don't have the \nssh-copy-id\n utility but have ssh access to your server, you can use this one-liner to copy your key (from \nDigital Ocean\n): \n\n\ncat ~/.ssh/id_rsa.pub \n|\n ssh username@remote_host \nmkdir -p ~/.ssh \n touch ~/.ssh/authorized_keys \n chmod -R go= ~/.ssh \n cat \n ~/.ssh/authorized_keys\n\n\n\n\n\n\nCopying the key manually\n\n\nYou will need to copy the \nid_rsa.pub\n you have generated earlier to your server and add the contents to \n~/.ssh/authorized_keys\n.\n\n\nFirst, you need to check if the .ssh directory exists in your home directory. You can create it using the following command:\n\n\nmkdir -p ~/.ssh\n\n\n\n\n\n\n\nTip\n\n\nThe \nmkdir -p\n command is perfectly harmless if the directory already exists.\n\n\n\n\nThen, you need to copy the contents of the id_rsa.pub file into a file called \nauthorized_keys\n:\n\n\ncat id_rsa.pub \n ~/.ssh/authorized_keys\n\n\n\n\n\nFinally, you need to make sure the permissions are right for these files:\n\n\nchmod -R \ngo\n=\n ~/.ssh\nchown -R yourusername:yourusername ~/.ssh\n\n\n\n\n\nThe first command removes the permissions for anyone other than \nyourusername\n and the second command ensures that \nyourusername\n is the owner the the \n.ssh\n directory and all its contents. Make sure to substitute \nyourusername\n with the name of the actual account on your server.\n\n\n3 - Testing the password-less authentication\n\n\nNow that everything is set-up, try to log on to your server using SSH:\n\n\nssh yourusername@yourserver\n\n\n\n\n\nIf your server still asks for a password (other than the private key passphrase, if using) or if it refuses the connection, please verify that you have followed all the steps above.\n\n\n4 - Disabling password-based authentication\n\n\nOnce you have tested that you can log on using your key, you can increase your server security by disabling password-based authentication.\n\n\n\n\nDanger\n\n\nMake sure that your key is working and that it is safely stored. Disabling password-based authentication will effectively lock you out of your server should you lose that key! Always make sure that you have a contingency plan!\n\n\n\n\nOnce you have tested and are able to login using only the key, you will have to edit the SSHd configuration to disable password authentication. On most linux servers, this will allow you to edit the config file:\n\n\nsudo nano /etc/ssh/sshd_config\n\n\n\n\n\nIf that file, find and uncomment (remove the \n#\n) the line that says:\n\n\n#PasswordAuthentication yes\n\n\n\n\n\nand change it to:\n\n\nPasswordAuthentication no\n\n\n\n\n\n\n\nTip\n\n\nWhile you are in that configuration file, you should change the default port for SSH. Look for the \nPort 22\n directive and change it to a port \n 1024 for increased security. Make sure that the chosen port is not occupied by another service and that it is enabled in your firewall.\n\n\n\n\nSave the file and restart your server to enable the changes.\n\n\n5 - Creating an alias to accelerate the connection\n\n\nNow that you can login using a key, why stop there? If you have changed the port on your server, the command would now be something like:\n\n\nssh -p \n2022\n yourusername@yourserver.com\n\n\n\n\n\nWhat if I told you that it could only be:\n\n\nssh yourserver\n\n\n\n\n\nNeat, no? All you need to do is create an alias. Here's how. On your machine, run the following command:\n\n\nnano ~/.ssh/config\n\n\n\n\n\nIn that file, type:\n\n\nHost yourserver\n    HostName yourserver.com\n    User yourusername\n    Port yourport\n\n\n\n\n\nyourserver\n after the \nHost\n directive is the name of the shortcut that your want. The \nHostName\n is the real domain name your your server. The \nUser\n is the username you use to connect and the \nPort\n is the port you have set in step 4 (default is 22). Once you have saved the file, you should be able to connect using only \nssh yourserver\n.", 
            "title": "Creating SSH keys and aliases"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#creating-ssh-keys-and-aliases", 
            "text": "", 
            "title": "Creating SSH keys and aliases"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#1-create-a-rsa-key-pair", 
            "text": "Run the following command to generate a key pair on your machine:  ssh-keygen   Note  You can optionally use the command  ssh-keygen -b 4096  to use a higher security key.   You will be prompted for a location. You can use the default location (just press  enter ) or specify your own.   Warning  Make sure you don't overwrite any existing file, because you may break an existing connection if you do.   You will then be prompted to enter a passphrase. This step is optional, but recommended, especially if you share your machine with other people. If you specify a passphrase, you will be prompted for it every time you use the key to login using SSH.  You should then have two files at your specified location:  id_rsa , which is your  private  key (do NOT share with anyone) and  id_rsa.pub , which is your  public  key (that you will put on your server).", 
            "title": "1 - Create a RSA key pair"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#2-copying-your-key-to-the-server", 
            "text": "Now you need to copy your new key to your server. You will need either a password-based SSH account or physical access to the machine for this step. Here are two ways of doing this:", 
            "title": "2 - Copying your key to the server"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#using-ssh-copy-id", 
            "text": "If you have  ssh-copy-id  available on your system this step is easy, just run the following command:  ssh-copy-id yourusername@yourserver  yourusername  should be a password-based SSH account on your server.  If you don't have the  ssh-copy-id  utility but have ssh access to your server, you can use this one-liner to copy your key (from  Digital Ocean ):   cat ~/.ssh/id_rsa.pub  |  ssh username@remote_host  mkdir -p ~/.ssh   touch ~/.ssh/authorized_keys   chmod -R go= ~/.ssh   cat   ~/.ssh/authorized_keys", 
            "title": "Using ssh-copy-id"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#copying-the-key-manually", 
            "text": "You will need to copy the  id_rsa.pub  you have generated earlier to your server and add the contents to  ~/.ssh/authorized_keys .  First, you need to check if the .ssh directory exists in your home directory. You can create it using the following command:  mkdir -p ~/.ssh   Tip  The  mkdir -p  command is perfectly harmless if the directory already exists.   Then, you need to copy the contents of the id_rsa.pub file into a file called  authorized_keys :  cat id_rsa.pub   ~/.ssh/authorized_keys  Finally, you need to make sure the permissions are right for these files:  chmod -R  go =  ~/.ssh\nchown -R yourusername:yourusername ~/.ssh  The first command removes the permissions for anyone other than  yourusername  and the second command ensures that  yourusername  is the owner the the  .ssh  directory and all its contents. Make sure to substitute  yourusername  with the name of the actual account on your server.", 
            "title": "Copying the key manually"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#3-testing-the-password-less-authentication", 
            "text": "Now that everything is set-up, try to log on to your server using SSH:  ssh yourusername@yourserver  If your server still asks for a password (other than the private key passphrase, if using) or if it refuses the connection, please verify that you have followed all the steps above.", 
            "title": "3 - Testing the password-less authentication"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#4-disabling-password-based-authentication", 
            "text": "Once you have tested that you can log on using your key, you can increase your server security by disabling password-based authentication.   Danger  Make sure that your key is working and that it is safely stored. Disabling password-based authentication will effectively lock you out of your server should you lose that key! Always make sure that you have a contingency plan!   Once you have tested and are able to login using only the key, you will have to edit the SSHd configuration to disable password authentication. On most linux servers, this will allow you to edit the config file:  sudo nano /etc/ssh/sshd_config  If that file, find and uncomment (remove the  # ) the line that says:  #PasswordAuthentication yes  and change it to:  PasswordAuthentication no   Tip  While you are in that configuration file, you should change the default port for SSH. Look for the  Port 22  directive and change it to a port   1024 for increased security. Make sure that the chosen port is not occupied by another service and that it is enabled in your firewall.   Save the file and restart your server to enable the changes.", 
            "title": "4 - Disabling password-based authentication"
        }, 
        {
            "location": "/linux-sys-admin/creating-ssh-keys/#5-creating-an-alias-to-accelerate-the-connection", 
            "text": "Now that you can login using a key, why stop there? If you have changed the port on your server, the command would now be something like:  ssh -p  2022  yourusername@yourserver.com  What if I told you that it could only be:  ssh yourserver  Neat, no? All you need to do is create an alias. Here's how. On your machine, run the following command:  nano ~/.ssh/config  In that file, type:  Host yourserver\n    HostName yourserver.com\n    User yourusername\n    Port yourport  yourserver  after the  Host  directive is the name of the shortcut that your want. The  HostName  is the real domain name your your server. The  User  is the username you use to connect and the  Port  is the port you have set in step 4 (default is 22). Once you have saved the file, you should be able to connect using only  ssh yourserver .", 
            "title": "5 - Creating an alias to accelerate the connection"
        }, 
        {
            "location": "/infrastructure/replace-hdd-p2000/", 
            "text": "How to replace/upgrade a drive in a HP MSA P2000\n\n\n1 - Replace the disk\n\n\nRemove the disk that needs replacing / upgrading and insert the new disk in your MSA. After a few seconds, the new drive should show up as available in the HP MSA Storage Management Utility:\n\n\n\n\n2 - Re-Join the disk\n\n\nIn the Storage Management Utility, right-click the vdisk that contained the old disk and select Configuration \n Manage Dedicated Spares:\n\n\n\n\nThe newly added drive should show as 'available'. Check the box next to it and click 'Modify Spares':\n\n\n\n\nThe disk will still show up as spare, but the RAID array will reconstruct and it will show up an active member of the array when it's done. This will take a long time:", 
            "title": "How to replace/upgrade a drive in a HP MSA P2000"
        }, 
        {
            "location": "/infrastructure/replace-hdd-p2000/#how-to-replaceupgrade-a-drive-in-a-hp-msa-p2000", 
            "text": "", 
            "title": "How to replace/upgrade a drive in a HP MSA P2000"
        }, 
        {
            "location": "/infrastructure/replace-hdd-p2000/#1-replace-the-disk", 
            "text": "Remove the disk that needs replacing / upgrading and insert the new disk in your MSA. After a few seconds, the new drive should show up as available in the HP MSA Storage Management Utility:", 
            "title": "1 - Replace the disk"
        }, 
        {
            "location": "/infrastructure/replace-hdd-p2000/#2-re-join-the-disk", 
            "text": "In the Storage Management Utility, right-click the vdisk that contained the old disk and select Configuration   Manage Dedicated Spares:   The newly added drive should show as 'available'. Check the box next to it and click 'Modify Spares':   The disk will still show up as spare, but the RAID array will reconstruct and it will show up an active member of the array when it's done. This will take a long time:", 
            "title": "2 - Re-Join the disk"
        }
    ]
}